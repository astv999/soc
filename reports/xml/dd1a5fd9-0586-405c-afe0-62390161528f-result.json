{"name": "test_logsum", "status": "broken", "statusDetails": {"message": "Exception: 截图失败!", "trace": "self = <pages.soc.loginPage.LoginPage object at 0x000001AEEE301320>\nlocator = ('id', 'user')\n\n    def findElement(self, locator):\n        '''定位到元素，返回元素对象，没定位到，Timeout异常'''\n        if not isinstance(locator, tuple):\n            print('locator参数类型错误，必须传元祖类型：loc = (\"id\", \"value1\")')\n        else:\n            try:\n                self.logger.info(\"正在定位元素信息：定位方式->%s, value值->%s\" % (locator[0], locator[1]))\n>               ele = WebDriverWait(self.driver, self.timeout, self.t).until(EC.presence_of_element_located(locator))\n\ncommon\\basePage.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1b976d87dd8895fa39f6b91a63fe75c7\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x000001AEEE331390>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.soc.loginPage.LoginPage object at 0x000001AEEE301320>\nfile_name = '2020-05-19_10-16-53'\n\n    def get_screen(self,file_name=time.strftime('%Y-%m-%d_%H-%S-%M',time.localtime(time.time()))):\n        \"\"\"截图\"\"\"\n        self.logger.info(\"在此时进行截图！！\")\n        delete_expire_screen(expire=5)\n        try:\n            dit = readYaml.read(constants.PROJECT_YAML)\n>           file_name = r\"{}\\screen\\{}.png\".format(dit['project']['path'], file_name)\nE           KeyError: 'path'\n\ncommon\\basePage.py:378: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.soc.loginPage.LoginPage object at 0x000001AEEE301320>\nlocator = ('id', 'user'), text = 'admin'\n\n    def sendKeys(self, locator, text=''):\n        try:\n>           ele = self.findElement(locator)\n\ncommon\\basePage.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.soc.loginPage.LoginPage object at 0x000001AEEE301320>\nlocator = ('id', 'user')\n\n    def findElement(self, locator):\n        '''定位到元素，返回元素对象，没定位到，Timeout异常'''\n        if not isinstance(locator, tuple):\n            print('locator参数类型错误，必须传元祖类型：loc = (\"id\", \"value1\")')\n        else:\n            try:\n                self.logger.info(\"正在定位元素信息：定位方式->%s, value值->%s\" % (locator[0], locator[1]))\n                ele = WebDriverWait(self.driver, self.timeout, self.t).until(EC.presence_of_element_located(locator))\n                return ele\n            except Exception as e:\n>               self.get_screen()\n\ncommon\\basePage.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.soc.loginPage.LoginPage object at 0x000001AEEE301320>\nfile_name = '2020-05-19_10-16-53'\n\n    def get_screen(self,file_name=time.strftime('%Y-%m-%d_%H-%S-%M',time.localtime(time.time()))):\n        \"\"\"截图\"\"\"\n        self.logger.info(\"在此时进行截图！！\")\n        delete_expire_screen(expire=5)\n        try:\n            dit = readYaml.read(constants.PROJECT_YAML)\n            file_name = r\"{}\\screen\\{}.png\".format(dit['project']['path'], file_name)\n            self.driver.get_screenshot_as_file(file_name)\n            with open(file_name, 'rb') as file:\n                f = file.read()\n                allure.attach(\"截图\", f, type=allure.PNG)\n            self.logger.info(\"已成功生成截图，请确认！\")\n        except:\n>           raise Exception(\"截图失败!\")\nE           Exception: 截图失败!\n\ncommon\\basePage.py:385: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.soc.loginPage.LoginPage object at 0x000001AEEE301320>\nfile_name = '2020-05-19_10-16-53'\n\n    def get_screen(self,file_name=time.strftime('%Y-%m-%d_%H-%S-%M',time.localtime(time.time()))):\n        \"\"\"截图\"\"\"\n        self.logger.info(\"在此时进行截图！！\")\n        delete_expire_screen(expire=5)\n        try:\n            dit = readYaml.read(constants.PROJECT_YAML)\n>           file_name = r\"{}\\screen\\{}.png\".format(dit['project']['path'], file_name)\nE           KeyError: 'path'\n\ncommon\\basePage.py:378: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.soc.index_page.test_log_summary.Test_LogSummary object at 0x000001AEEE2B2D30>\n\n    @allure.step(\"初始化\")\n    def setup(self):\n        self.driver = webdriver.Chrome()\n        self.driver.maximize_window()\n        self.loginpage = LoginPage(self.driver)\n        self.datasummarypage = DataSummary(self.driver)\n    \n>       self.loginpage.login(username=\"admin\", pwd=\"1qaz@WSX\")\n\ntestcase\\soc\\index_page\\test_log_summary.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\soc\\loginPage.py:28: in login\n    self.sendKeys(self.username_input, text=username)\ncommon\\basePage.py:141: in sendKeys\n    self.get_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.soc.loginPage.LoginPage object at 0x000001AEEE301320>\nfile_name = '2020-05-19_10-16-53'\n\n    def get_screen(self,file_name=time.strftime('%Y-%m-%d_%H-%S-%M',time.localtime(time.time()))):\n        \"\"\"截图\"\"\"\n        self.logger.info(\"在此时进行截图！！\")\n        delete_expire_screen(expire=5)\n        try:\n            dit = readYaml.read(constants.PROJECT_YAML)\n            file_name = r\"{}\\screen\\{}.png\".format(dit['project']['path'], file_name)\n            self.driver.get_screenshot_as_file(file_name)\n            with open(file_name, 'rb') as file:\n                f = file.read()\n                allure.attach(\"截图\", f, type=allure.PNG)\n            self.logger.info(\"已成功生成截图，请确认！\")\n        except:\n>           raise Exception(\"截图失败!\")\nE           Exception: 截图失败!\n\ncommon\\basePage.py:385: Exception"}, "steps": [{"name": "初始化", "status": "broken", "statusDetails": {"message": "Exception: 截图失败!\n", "trace": "  File \"C:\\Users\\87241\\PycharmProjects\\soc-auto-test\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\87241\\PycharmProjects\\soc-auto-test\\testcase\\soc\\index_page\\test_log_summary.py\", line 16, in setup\n    self.loginpage.login(username=\"admin\", pwd=\"1qaz@WSX\")\n  File \"C:\\Users\\87241\\PycharmProjects\\soc-auto-test\\pages\\soc\\loginPage.py\", line 28, in login\n    self.sendKeys(self.username_input, text=username)\n  File \"C:\\Users\\87241\\PycharmProjects\\soc-auto-test\\common\\basePage.py\", line 141, in sendKeys\n    self.get_screen()\n  File \"C:\\Users\\87241\\PycharmProjects\\soc-auto-test\\common\\basePage.py\", line 385, in get_screen\n    raise Exception(\"截图失败!\")\n"}, "start": 1589856796483, "stop": 1589856820748}], "start": 1589856796481, "stop": 1589856796481, "uuid": "af8bf43f-f552-495a-b712-7fd5b473b59c", "historyId": "79121f05b07a9fc33e960880da1f5d94", "testCaseId": "0c9b279ea54406218d03fd5b1ff7d7e8", "fullName": "testcase.soc.index_page.test_log_summary.Test_LogSummary#test_logsum", "labels": [{"name": "feature", "value": "首页-数据概要用例合集"}, {"name": "parentSuite", "value": "testcase.soc.index_page"}, {"name": "suite", "value": "test_log_summary"}, {"name": "subSuite", "value": "Test_LogSummary"}, {"name": "host", "value": "DESKTOP-MKBIA25"}, {"name": "thread", "value": "688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.soc.index_page.test_log_summary"}]}